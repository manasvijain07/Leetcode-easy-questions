Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

 

Example 1:

Input: n = 19
Output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
Example 2:

Input: n = 2
Output: false
 

Constraints:

1 <= n <= 231 - 1

--------------------------------------
Sol1 - Using hashmap and hashset
TC - O(log n)
SC - O(log n)

class Solution {
    public boolean isHappy(int n) {
        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0, 0);
        map.put(1, 1);
        map.put(2, 4);
        map.put(3, 9);
        map.put(4, 16);
        map.put(5, 25);
        map.put(6, 36);
        map.put(7, 49);
        map.put(8, 64);
        map.put(9, 81);

        HashSet<Integer> set = new HashSet<>();
        int sum = 0;

        while(true)
        {
            while(n != 0)
            {
                int val = n % 10;
                sum = sum + map.get(val);
                n = n/10;
            }
            if(sum == 1)
            {
                return true;
            }
            if(set.contains(sum))
            {
                return false;
            }
            set.add(sum);
            n = sum;
            sum = 0;
        }

        // return n == 1;
    }
}

------------------------------------------------
Sol 2 - Floyd's Tortoise method
TC - O(log n)
SC - O(log n)

class Solution {
    public boolean isHappy(int n) {
        int slow = square(n);
        int fast = square(square(n));

        while(slow != fast && fast != 1)
        {
            slow = square(slow);
            fast = square(square(fast));
        }
        return fast == 1;
    }

    public int square(int n)
    {
        int sum = 0;

        while(n != 0)
        {
            int val = n % 10;
            sum += val * val;
            n = n/10;
        }
        return sum;
    }
}
