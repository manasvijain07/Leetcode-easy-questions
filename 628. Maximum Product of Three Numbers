628. Maximum Product of Three Numbers

Given an integer array nums, find three numbers whose product is maximum and return the maximum product.

 

Example 1:

Input: nums = [1,2,3]
Output: 6
Example 2:

Input: nums = [1,2,3,4]
Output: 24
Example 3:

Input: nums = [-1,-2,-3]
Output: -6
 

Constraints:

3 <= nums.length <= 104
-1000 <= nums[i] <= 1000

--------------------------------------------
Sol 1 - TC - O(n log n)
SC - O(log n) or O(n) depends on sorting

class Solution {
    public int maximumProduct(int[] nums) {
        Arrays.sort(nums);
        int n = nums.length;
        return Math.max(nums[n - 1] * nums[n - 2] * nums[n - 3],
                        nums[0] * nums[1] * nums[n - 1]);
    }
}

----------------------------------
Sol 2 - TC - O(n)
SC - O(1)

class Solution {
    public int maximumProduct(int[] nums) {
        if(nums.length == 3)
        {
            return nums[0] * nums[1] * nums[2];
        }

        int minVal1 = Integer.MAX_VALUE, minVal2 = Integer.MAX_VALUE, max1 = Integer.MIN_VALUE, max2 = Integer.MIN_VALUE, max3 = Integer.MIN_VALUE;

        for(int val : nums)
        {
            if(val < minVal1)
            {
                minVal2 = Math.min(minVal2, minVal1);
                minVal1 = val;
            }
            else if(val < minVal2)
            {
                minVal2 = val;
            }
            
            if(val > max1)
            {
                max3 = Math.max(max2, max3);
                max2 = Math.max(max2, max1);
                max1 = val;
            }
            else if(max2 < val)
            {
                max3 = Math.max(max2, max3);
                max2 = val;
            }
            else if(val > max3)
            {
                max3 = val;
            }
        }
        return Math.max(max1 * max2 * max3,
                        minVal1 * minVal2 * max1);
    }
}
