1512. Number of Good Pairs

Given an array of integers nums, return the number of good pairs.

A pair (i, j) is called good if nums[i] == nums[j] and i < j.

 

Example 1:

Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.
Example 2:

Input: nums = [1,1,1,1]
Output: 6
Explanation: Each pair in the array are good.
Example 3:

Input: nums = [1,2,3]
Output: 0
 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 100
----------------------------------------------
Sol 1- Brute force TC - O(n ^2) SC - O(1)

class Solution {
    public int numIdenticalPairs(int[] nums) {
        int len = nums.length, res = 0;

        if(nums == null || len == 0)
            return 0;

        for(int i = 0; i < len - 1; i++)
        {
            for(int j = i + 1; j < len; j++)
            {
                if(nums[i] == nums[j])
                {
                    res++;
                }
            }
        } 
        return res;
    }
}

--------------------------------------

Sol 2- frequency count - TC - O(n) SC - O(n)

class Solution {
    public int numIdenticalPairs(int[] nums) {
        int len = nums.length, res = 0;

        if(nums == null || len == 0)
            return 0;

        int[] cnt = new int[101];
        for(int val : nums)
        {
            res += cnt[val]++;
        }
        return res;
    }
}
----------------------------------------
Sol 3 - Using HashMap TC - O(n) SC - O(1)
class Solution {
    public int numIdenticalPairs(int[] nums) {
        int len = nums.length, res = 0;

        if(nums == null || len == 0)
            return 0;

        HashMap<Integer, Integer> map = new HashMap();
        for(int val : nums)
        {
            res += map.getOrDefault(val, 0);
            map.put(val, map.getOrDefault(val, 0) + 1);
        }
        return res;
    }
}
