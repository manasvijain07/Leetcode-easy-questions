Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109
 

Follow-up: Could you solve the problem in linear time and in O(1) space?
------------------------------------

Sol 1 - TC - O(n log n)
SC - O(1)

class Solution {
    public int majorityElement(int[] nums) {
        if(nums == null || nums.length <= 1)
        {
            return nums[0];
        }
        Arrays.sort(nums);
        return nums[(int)nums.length/ 2];
    }
}

------------------------------------------
Sol 2 - TC - O(n)
SC - O(n)

class Solution {
    public int majorityElement(int[] nums) {
        if(nums == null || nums.length <= 1)
        {
            return nums[0];
        }
        int count = nums.length/2;
        HashMap<Integer, Integer> map = new HashMap<>();

        for(int val : nums)
        {
            map.put(val, map.getOrDefault(val, 0) + 1);
            if(map.get(val) > count)
            {
                return val;
            }
        }
        return -1;
    }
}

------------------------------------
Sol 3 - TC - O(n)
SC - O(1)

class Solution {
    public int majorityElement(int[] nums) {
        if(nums == null || nums.length <= 1)
        {
            return nums[0];
        }
        
        int majority = nums[0], votes = 1;

        for(int i = 1; i < nums.length; i++)
        {
            if(nums[i] == majority)
            {
                votes++;
            }
            else
            {
                votes--;
                if(votes == 0)
                {
                    majority = nums[i];
                    votes = 1;
                }
            }
        }
        return majority;
    }
}

// https://www.youtube.com/watch?v=wD7fs5P_MVo

