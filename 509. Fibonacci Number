509. Fibonacci Number

The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,

F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.
Given n, calculate F(n).

 

Example 1:

Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.
Example 2:

Input: n = 3
Output: 2
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.
Example 3:

Input: n = 4
Output: 3
Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.
 

Constraints:

0 <= n <= 30

-------------------------------------------

Sol 1 - Iterative
TC - O(n)
SC - O(1)

class Solution {
    public int fib(int n) {
        if(n == 0 || n == 1)
        {
            return n;
        }

        int a = 0, b = 1, c = 0;
        for(int i = 2; i <= n; i++)
        {
            c = a + b;
            a = b;
            b = c;
        }
        return b;
    }
}

---------------------------------------

Sol 2 - Recursive
TC - O(2 ^ n)
SC - O(n)

class Solution {
    public int fib(int n) {
        if(n == 0 || n == 1)
        {
            return n;
        }

       return fib(n - 1) + fib(n - 2);
    }
}

------------------------------------------
Sol 3 - Recursive optimized
Tc - O(n)
SC - O(n)

class Solution {
    public int fib(int n) {
        if(n == 0 || n == 1)
        {
            return n;
        }

       return sum(n, 0, 1, 1, 0);
    }

    public int sum(int n, int a, int b, int index, int c)
    {
        if(n == index)
        {
            return b;
        }
        c = a + b;
        return sum(n, b, c, index + 1, c);
    }
}

-------------------------------
Sol 4 - DP
TC - O(n)
SC - O(n)

class Solution {
    public int fib(int n) {
        if(n == 0 || n == 1)
            return n;
            
        int[] dp = new int[n + 1];
        dp[0] = 0;
        dp[1] = 1;
        for(int i = 2; i < n + 1; i++)
        {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        return dp[dp.length - 1];
    }
}
